import { useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { CreateNoteModal } from "~/components/CreateNoteModal";
import { LoadingPage } from "~/components/LoadingSpinner";
import { api } from "~/utils/api";
import { useAutoAnimate } from "@formkit/auto-animate/react";

const Home: NextPage = () => {
  const router = useRouter();
  const [parent] = useAutoAnimate();
  const { isSignedIn, isLoaded } = useUser();
  const [isCreateNoteModalOpen, setIsCreateNoteModalOpen] = useState(false);

  const { data: notesData, isFetching: isFetchingNotes } =
    api.note.getAll.useQuery();

  useEffect(() => {
    if (!isSignedIn) {
      void router.push("/sign-up");
    }
  }, [isSignedIn, router]);

  if (!isLoaded || (isFetchingNotes && !notesData)) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>Jot It</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="m-4 flex flex-col">
        {!notesData?.length ? (
          <div>No data :/</div>
        ) : (
          <div ref={parent} className="grid grid-cols-fill-xs gap-3">
            {notesData.map((note) => (
              <div
                key={note.renderId}
                className="rounded-lg border border-t-8 border-yellow-400 bg-white p-2 dark:border-yellow-200  dark:bg-gray-900 dark:text-white"
              >
                <div className="line-clamp-6">{note.content}</div>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          className="mt-2 w-max rounded-md bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-white dark:hover:bg-gray-700"
          onClick={() => {
            setIsCreateNoteModalOpen(true);
          }}
        >
          Create note
        </button>

        <CreateNoteModal
          isOpen={isCreateNoteModalOpen}
          onClose={() => {
            setIsCreateNoteModalOpen(false);
          }}
        />
      </main>
    </>
  );
};

export default Home;
